{
  "rules": {
    "general": {
      "role": "You are an expert React and Vite developer. Prioritize performance, simplicity, and maintainability.",
      "aesthetic": "Ensure a modern, clean, dark-themed aesthetic with smooth animations using Tailwind CSS and Framer Motion.",
      "code_style": "Favor minimal, well-structured code. Avoid overengineering but ensure scalability where needed.",
      "languages": "The codebase includes JavaScript (JS), JavaScript XML (JSX), and TypeScript XML (TSX). Be diligent in recognizing and handling these languages correctly.",
      "mobile_optimization": "This application is 100% designed for mobile web browsers, specifically Chrome and Safari. Every feature, layout, and interaction should be optimized for mobile performance, responsiveness, and touch input."
    },

    "vite": {
      "best_practices": [
        "Use Vite for its speed and lightweight setup. Optimize for fast HMR and minimal dependencies.",
        "Prefer absolute imports with '@' aliasing to keep the project structure clean.",
        "Keep build times low and bundle size minimal. Avoid unnecessary polyfills or heavy libraries."
      ]
    },

    "react": {
      "best_practices": [
        "Use functional components and hooks. Avoid unnecessary class components.",
        "Favor useState and useContext over complex state management solutions unless needed.",
        "Ensure components are modular and reusable. Avoid deeply nested component trees.",
        "Recognize when a component is written in JSX or TSX and apply the appropriate conventions.",
        "Ensure touch gestures and interactions are fluid on mobile browsers (Chrome & Safari).",
        "Use proper viewport meta tags to ensure responsive scaling."
      ]
    },

    "tailwind": {
      "guidelines": [
        "Follow a clean, consistent dark mode design. Use Tailwind's utility-first approach.",
        "Keep classnames organized and readable. Avoid excessive custom CSS.",
        "Use Tailwind animations sparingly. Ensure transitions feel smooth and natural.",
        "Ensure all layouts are mobile-first and adapt fluidly to different screen sizes."
      ]
    },

    "motion": {
      "animations": [
        "Use Framer Motion for animations. Keep them subtle, fluid, and non-distracting.",
        "Favor easing functions like 'easeOut' for smooth effects.",
        "Animations should enhance usability, not slow down interactions.",
        "Optimize animations for mobile performance to prevent laggy experiences."
      ]
    },

    "api": {
      "axios": [
        "Use Axios for API requests. Set up a centralized instance with interceptors for Zoho authentication.",
        "Ensure proper error handling for API responses. Avoid silent failures.",
        "Use async/await cleanly. Keep API calls modular and reusable."
      ]
    },

    "router": {
      "navigation": [
        "Use React Router for navigation. Keep routing simple and intuitive.",
        "Ensure lazy loading for routes where it makes sense.",
        "Favor declarative navigation (useNavigate) over direct hrefs.",
        "Optimize navigation interactions for mobile (e.g., gesture-based navigation)."
      ]
    },

    "ocr": {
      "scanning": [
        "Use Tesseract.js efficiently. Run OCR in a web worker to prevent UI blocking.",
        "Ensure the camera scanner works smoothly on mobile and desktop.",
        "Optimize serial number detection by training Tesseract properly.",
        "Ensure camera-based OCR scanning works seamlessly in mobile browsers (Chrome & Safari)."
      ]
    },

    "project_structure": {
      "best_practices": [
        "Maintain a clear project structure: /src/components, /src/pages, /src/hooks, /src/utils, /src/services.",
        "Keep files lightweight and organized. Avoid overly large components.",
        "Ensure naming conventions are consistent and intuitive.",
        "Be mindful of file extensions: use .js for vanilla JavaScript, .jsx for React components without TypeScript, and .tsx for TypeScript-based components."
      ]
    },

    "mobile_specific": {
      "optimization": [
        "Ensure a fully responsive mobile-first design with flexible grid layouts.",
        "Test and optimize for Chrome and Safari mobile browsers—avoid desktop-only behaviors.",
        "Use fast, touch-friendly UI components with minimal delay (e.g., no hover-only elements).",
        "Optimize assets and code for quick loading on mobile networks.",
        "Avoid fixed pixel values—favor percentages and viewport units for better adaptability."
      ]
    }
  }
}
